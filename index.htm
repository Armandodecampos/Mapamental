<!DOCTYPE html>
<html>
<head>
    <title>Editor de Diagramas Interativo</title>
    <style>
        body {
            margin: 0;
            overflow: auto;
            width: 3000px;
            height: 3000px;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f0f0f0;
        }
        canvas { display: block; }
        #controls {
            position: fixed;
            top: 20px;
            left: 20px;
            z-index: 10;
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            padding: 10px;
            border-radius: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        #controls button {
            padding: 10px 15px; /* Botões menores */
            border: none;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
            font-size: 12px;  /* Texto menor */
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: background-color 0.3s ease, transform 0.1s ease;
        }
        #controls button:hover {
            background-color: #367c39;
            transform: scale(1.05);
        }
        #controls button:active {
            background-color: #2b5e2e;
            transform: scale(0.95);
        }
        #addImageInput { display: none; }
        #textEditor {
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            padding: 10px;
            z-index: 11;
            display: none;
            white-space: pre-wrap;
            overflow: auto;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        #eraserBtn {
            background-color: #f44336;
            color: white;
        }
        #eraserBtn:hover {
            background-color: #d32f2f;
        }
        #eraserBtn:active {
            background-color: #b0201e;
        }

        /* Estilos para telas menores */
        @media (max-width: 600px) {
            #controls {
                flex-direction: column; /* Coluna em telas pequenas */
                align-items: center; /* Centralizar os botões */
                left: 10px;
                top: 10px;
            }
            #controls button {
                margin: 5px 0; /* Espaçamento entre os botões na coluna */
                width: 100%; /* Botões ocupam a largura total */
                text-align: center;
            }
        }
    </style>
</head>
<body>
    <div id="controls">
        <button onclick="addBalloon()">Adicionar Balão</button>
        <button onclick="addArrow()">Adicionar Flecha</button>
        <button onclick="addImageInput.click()">Adicionar Imagem</button>
        <input type="file" id="addImageInput" style="display:none;" accept="image/*" onchange="addImage(event)">
        <button onclick="toggleEraserMode()" id="eraserBtn">Ativar Borracha</button>
        <button onclick="undoAction()">Desfazer</button>
        <button onclick="redoAction()">Refazer</button>
        <button onclick="saveProject()">Salvar Projeto</button>
        <button onclick="loadProject()">Carregar Projeto</button>
        <button onclick="exportDiagram()">Exportar</button>
    </div>
    <canvas id="myCanvas"></canvas>
    <textarea id="textEditor"></textarea>
    <script>
        const canvas = document.getElementById('myCanvas');
        const ctx = canvas.getContext('2d');
        const textEditor = document.getElementById('textEditor');

        canvas.width = document.body.scrollWidth;
        canvas.height = document.body.scrollHeight;

        let elements = [];
        redraw();

        let selectedElement = null;
        let isDragging = false;
        let offsetX, offsetY;
        let startPoint = null;
        let history = [];
        let historyIndex = -1;
        let editingBalloon = null;
        let dragTimer;
        const dragThreshold = 200;
        const balloonPaddingX = 20;
        const balloonPaddingY = 15;
        const lineHeight = 18;
        const resizeHandleSize = 10;

        let isEraserActive = false;

        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            redraw();
        }

        function saveState() {
            const serializedElements = elements.map(element => {
                if (element.type === 'image' && element.img) {
                    // Convert the image to a data URL before saving
                    const imgCanvas = document.createElement('canvas');
                    const imgCtx = imgCanvas.getContext('2d');
                    imgCanvas.width = element.img.width;
                    imgCanvas.height = element.img.height;
                    imgCtx.drawImage(element.img, 0, 0);
                    const imgSrc = imgCanvas.toDataURL();
                    return { ...element, imgSrc }; // Store data URL instead of Image object
                }
                return element;
            });
            history = history.slice(0, historyIndex + 1);
            history.push(serializedElements);
            historyIndex++;
        }

        function restoreState() {
            if (historyIndex >= 0 && history[historyIndex]) {
                const savedElements = history[historyIndex];
                // When restoring, recreate the Image objects from the data URLs
                elements = savedElements.map(element => {
                    if (element.type === 'image' && element.imgSrc) {
                        const img = new Image();
                        img.src = element.imgSrc; // Start loading the image
                        return { ...element, img: img }; // Store the Image object
                    }
                    return element;
                });
                // Wait for all images to load before redrawing
                let imagesLoaded = 0;
                const totalImages = elements.filter(el => el.type === 'image').length;

                if (totalImages === 0) {
                    redraw(); // If no images, just redraw
                } else {
                    elements.forEach(element => {
                        if (element.type === 'image' && element.img) {
                            element.img.onload = () => {
                                imagesLoaded++;
                                if (imagesLoaded === totalImages) {
                                    redraw(); // Redraw only after all images have loaded
                                }
                            };
                        }
                    });
                }
            }
        }

        function undoAction() {
            if (historyIndex > 0) {
                historyIndex--;
                restoreState();
            }
        }

        function redoAction() {
            if (historyIndex < history.length - 1) {
                historyIndex++;
                restoreState();
            }
        }

        function toggleEraserMode() {
            isEraserActive = !isEraserActive;
            const eraserBtn = document.getElementById('eraserBtn');
            eraserBtn.textContent = isEraserActive ? 'Desativar Borracha' : 'Ativar Borracha';
            canvas.style.cursor = isEraserActive ? 'crosshair' : 'default';
        }

        function addBalloon() {
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            const scrollX = window.scrollX;
            const scrollY = window.scrollY;
            const x = centerX + scrollX;
            const y = centerY + scrollY;
            const text = 'Novo\nBalão';
            ctx.font = '16px Segoe UI';
            const lines = text.split('\n');
            let maxWidth = 0;
            lines.forEach(line => {
                const width = ctx.measureText(line).width;
                maxWidth = Math.max(maxWidth, width);
            });
            const radiusX = maxWidth / 2 + balloonPaddingX;
            const radiusY = (lines.length * lineHeight) / 2 + balloonPaddingY;
            elements.push({ type: 'balloon', x, y, radiusX, radiusY, text, isDragging: false });
            saveState();
            redraw();
        }

        function addArrow() {
            const centerX = window.innerWidth / 2;
            const centerY = window.innerHeight / 2;
            const scrollX = window.scrollX;
            const scrollY = window.scrollY;
            const startX = centerX + scrollX - 25;
            const startY = centerY + scrollY - 25;
            startPoint = { x: startX, y: startY };
            elements.push({ type: 'arrow', x1: startPoint.x, y1: startPoint.y, x2: startPoint.x + 50, y2: startPoint.y + 50 });
            saveState();
            redraw();
        }

        function addImage(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const img = new Image();
                    img.onload = function () {
                        const centerX = window.innerWidth / 2;
                        const centerY = window.innerHeight / 2;
                        const scrollX = window.scrollX;
                        const scrollY = window.scrollY;
                        const x = centerX + scrollX - 50;
                        const y = centerY + scrollY - 50;
                        const width = 100;
                        const height = width * (img.height / img.width);
                        elements.push({
                            type: 'image',
                            imgSrc: e.target.result,
                            img: img,
                            x, y,
                            width, height,
                            originalWidth: img.width,
                            originalHeight: img.height
                        });
                        saveState();
                        redraw();
                    }
                    img.src = e.target.result;
                }
                reader.readAsDataURL(file);
            }
        }

        function drawBalloon(balloon) {
            ctx.font = '16px Segoe UI';
            const lines = balloon.text.split('\n');
            let maxWidth = 0;
            lines.forEach(line => {
                const width = ctx.measureText(line).width;
                maxWidth = Math.max(maxWidth, width);
            });
            balloon.radiusX = maxWidth / 2 + balloonPaddingX;
            balloon.radiusY = (lines.length * lineHeight) / 2 + balloonPaddingY;

            const gradient = ctx.createLinearGradient(balloon.x - balloon.radiusX, balloon.y - balloon.radiusY, balloon.x + balloon.radiusX, balloon.y + balloon.radiusY);
            gradient.addColorStop(0, '#E0EAFC');
            gradient.addColorStop(1, '#B0E0E6');

            ctx.beginPath();
            ctx.ellipse(balloon.x, balloon.y, balloon.radiusX, balloon.radiusY, 0, 0, 2 * Math.PI);
            ctx.fillStyle = gradient;
            ctx.fill();
            ctx.lineWidth = 1.5;
            ctx.strokeStyle = '#008B8B';
            ctx.stroke();
            ctx.fillStyle = 'black';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';

            lines.forEach((line, index) => {
                ctx.fillText(line, balloon.x, balloon.y - (lines.length - 1) * lineHeight / 2 + index * lineHeight);
            });
        }

        function drawArrow(arrow) {
            const headLength = 15;
            const dx = arrow.x2 - arrow.x1;
            const dy = arrow.y2 - arrow.y1;
            const angle = Math.atan2(dy, dx);

            ctx.beginPath();
            ctx.moveTo(arrow.x1, arrow.y1);
            ctx.lineTo(arrow.x2, arrow.y2);
            ctx.lineWidth = 2.5;
            ctx.strokeStyle = '#424242';
            ctx.stroke();

            ctx.beginPath();
            ctx.moveTo(arrow.x2, arrow.y2);
            ctx.lineTo(arrow.x2 - headLength * Math.cos(angle - Math.PI / 6), arrow.y2 - headLength * Math.sin(angle - Math.PI / 6));
            ctx.lineTo(arrow.x2 - headLength * Math.cos(angle + Math.PI / 6), arrow.y2 - headLength * Math.sin(angle + Math.PI / 6));
            ctx.closePath();
            ctx.fillStyle = '#424242';
            ctx.fill();
        }

        function drawImageElement(imageElement) {
            if (imageElement.img) {
                ctx.drawImage(imageElement.img, imageElement.x, imageElement.y, imageElement.width, imageElement.height);
                ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';
                ctx.fillRect(imageElement.x + imageElement.width - resizeHandleSize, imageElement.y + imageElement.height - resizeHandleSize, resizeHandleSize, resizeHandleSize);
            }
        }

        function redraw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            elements.forEach(element => {
                if (element.type === 'balloon') {
                    drawBalloon(element);
                } else if (element.type === 'arrow') {
                    drawArrow(element);
                } else if (element.type === 'image') {
                    drawImageElement(element);
                }
            });
        }

        function isInsideBalloon(balloon, x, y) {
            const dx = (x - balloon.x) / balloon.radiusX;
            const dy = (y - balloon.y) / balloon.radiusY;
            return (dx * dx + dy * dy) <= 1;
        }

        function isNearArrow(arrow, x, y, tolerance = 7) {
            const dist1 = Math.hypot(x - arrow.x1, y - arrow.y1);
            const dist2 = Math.hypot(x - arrow.x2, y - arrow.y2);
            const lineLength = Math.hypot(arrow.x2 - arrow.x1, arrow.y2 - arrow.y1);
            return Math.abs(dist1 + dist2 - lineLength) < tolerance;
        }

        function isInsideImage(imageElement, x, y) {
            return x >= imageElement.x && x <= imageElement.x + imageElement.width &&
                y >= imageElement.y && y <= imageElement.y + imageElement.height;
        }

        function showTextEditor(balloon) {
            editingBalloon = balloon;
            textEditor.style.left = (balloon.x - balloon.radiusX) + 'px';
            textEditor.style.top = (balloon.y - balloon.radiusY) + 'px';
            textEditor.style.width = (2 * balloon.radiusX) + 'px';
            textEditor.style.height = (2 * balloon.radiusY) + 'px';
            textEditor.value = balloon.text;
            textEditor.style.display = 'block';
            textEditor.focus();
        }

        textEditor.addEventListener('blur', () => {
            if (editingBalloon) {
                editingBalloon.text = textEditor.value;
                ctx.font = '16px Segoe UI';
                const lines = editingBalloon.text.split('\n');
                let maxWidth = 0;
                lines.forEach(line => {
                    const width = ctx.measureText(line).width;
                    maxWidth = Math.max(maxWidth, width);
                });
                editingBalloon.radiusX = maxWidth / 2 + balloonPaddingX;
                editingBalloon.radiusY = (lines.length * lineHeight) / 2 + balloonPaddingY;
                textEditor.style.height = (lines.length * lineHeight) + 2 * balloonPaddingY + 'px';
                textEditor.style.width = (2 * editingBalloon.radiusX) + 'px';
                textEditor.style.display = 'none';
                editingBalloon = null;
                saveState();
                redraw();
            }
        });

        canvas.addEventListener('mousedown', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            if (isEraserActive) {
                for (let i = elements.length - 1; i >= 0; i--) {
                    const element = elements[i];
                    const clicked =
                        (element.type === 'balloon' && isInsideBalloon(element, x, y)) ||
                        (element.type === 'arrow' && isNearArrow(element, x, y)) ||
                        (element.type === 'image' && isInsideImage(element, x, y));
                    if (clicked) {
                        elements.splice(i, 1);
                        saveState();
                        redraw();
                        break;
                    }
                }
                return;
            }

            selectedElement = null;
            clearTimeout(dragTimer);

            for (let i = elements.length - 1; i >= 0; i--) {
                const element = elements[i];
                if (element.type === 'balloon' && isInsideBalloon(element, x, y)) {
                    selectedElement = element;
                    dragTimer = setTimeout(() => {
                        if (selectedElement && selectedElement.type === 'balloon' && !editingBalloon) {
                            isDragging = true;
                            offsetX = x - selectedElement.x;
                            offsetY = y - selectedElement.y;
                            canvas.style.cursor = 'grab';
                        }
                    }, dragThreshold);
                    break;
                } else if (element.type === 'arrow' && isNearArrow(element, x, y)) {
                    selectedElement = element;
                    isDragging = true;
                    offsetX = x - selectedElement.x1;
                    offsetY = y - selectedElement.y1;
                    const dist1 = Math.hypot(x - selectedElement.x1, y - selectedElement.y1);
                    const dist2 = Math.hypot(x - selectedElement.x2, y - selectedElement.y2);
                    selectedElement.resizePoint = dist1 < 10 ? 'start' : dist2 < 10 ? 'end' : 'middle';
                    break;
                } else if (element.type === 'image' && isInsideImage(element, x, y)) {
                    if (x >= element.x + element.width - resizeHandleSize && x <= element.x + element.width &&
                        y >= element.y + element.height - resizeHandleSize && y <= element.y + element.height) {
                        selectedElement = element;
                        element.isResizing = true;
                    } else {
                        selectedElement = element;
                        element.dragOffsetX = x - element.x;
                        element.dragOffsetY = y - element.y;
                    }
                    isDragging = true;
                    break;
                }
            }
        });

        canvas.addEventListener('mouseup', (e) => {
            clearTimeout(dragTimer);
            canvas.style.cursor = 'default';

            if (!isDragging && selectedElement && selectedElement.type === 'balloon' && isInsideBalloon(selectedElement, e.clientX - canvas.getBoundingClientRect().left, e.clientY - canvas.getBoundingClientRect().top) && !editingBalloon) {
                showTextEditor(selectedElement);
            }

            if (isDragging && selectedElement) {
                delete selectedElement.resizePoint;
                delete selectedElement.dragOffsetX;
                delete selectedElement.dragOffsetY;
                delete selectedElement.isResizing;
                saveState();
                selectedElement = null;
                isDragging = false;
            } else if (startPoint) {
                const currentArrow = elements[elements.length - 1];
                currentArrow.x2 = e.clientX - canvas.getBoundingClientRect().left;
                currentArrow.y2 = e.clientY - canvas.getBoundingClientRect().top;
                startPoint = null;
                saveState();
                redraw();
            }
        });

        canvas.addEventListener('mousemove', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            if (isDragging && selectedElement) {
                if (selectedElement.type === 'balloon' && !editingBalloon) {
                    selectedElement.x = x - offsetX;
                    selectedElement.y = y - offsetY;
                    redraw();
                } else if (selectedElement.type === 'arrow') {
                    if (selectedElement.resizePoint === 'start') {
                        selectedElement.x1 = x;
                        selectedElement.y1 = y;
                    } else if (selectedElement.resizePoint === 'end') {
                        selectedElement.x2 = x;
                        selectedElement.y2 = y;
                    } else if (selectedElement.resizePoint === 'middle') {
                        const dx = x - (selectedElement.x1 + selectedElement.x2) / 2;
                        const dy = y - (selectedElement.y1 + selectedElement.y2) / 2;
                        selectedElement.x1 += dx;
                        selectedElement.y1 += dy;
                        selectedElement.x2 += dx;
                        selectedElement.y2 += dy;
                    }
                    redraw();
                } else if (selectedElement.type === 'image') {
                    if (selectedElement.isResizing) {
                        const newWidth = x - selectedElement.x;
                        const aspectRatio = selectedElement.originalHeight / selectedElement.originalWidth;
                        selectedElement.width = newWidth;
                        selectedElement.height = newWidth * aspectRatio;
                    } else {
                        selectedElement.x = x - selectedElement.dragOffsetX;
                        selectedElement.y = y - selectedElement.dragOffsetY;
                    }
                    redraw();
                }
            }
        });

        canvas.addEventListener('selectstart', (e) => {
            if (isDragging) e.preventDefault();
        });

        function saveProject() {
            const saveData = elements.map(element => {
                if (element.type === 'image' && element.imgSrc) {
                    return {
                        ...element,
                        imgSrc: element.imgSrc
                    };
                }
                return element;
            });
            localStorage.setItem('diagramData', JSON.stringify(saveData));
            alert('Projeto salvo com sucesso!');
        }

        function loadProject() {
            const savedData = localStorage.getItem('diagramData');
            if (savedData) {
                elements = JSON.parse(savedData);
                let imagesToLoad = 0;
                let imagesLoaded = 0;
                elements.forEach(element => {
                    if (element.type === 'image' && element.imgSrc) {
                        imagesToLoad++;
                        const img = new Image();
                        img.onload = () => {
                            imagesLoaded++;
                            element.img = img;
                            if (imagesLoaded === imagesToLoad) {
                                redraw();
                            }
                        };
                        img.src = element.imgSrc;
                    }
                });
                if (imagesToLoad === 0) {
                    redraw();
                } else if (imagesLoaded === imagesToLoad && imagesToLoad > 0) {
                    redraw();
                }
                saveState();
                alert('Projeto carregado com sucesso!');
            } else {
                alert('Nenhum projeto salvo encontrado.');
            }
        }

        function exportDiagram() {
            ctx.save();
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            elements.forEach(element => {
                if (element.type === 'balloon') {
                    drawBalloon(element);
                } else if (element.type === 'arrow') {
                    drawArrow(element);
                } else if (element.type === 'image') {
                    drawImageElement(element);
                }
            });

            const dataURL = canvas.toDataURL('image/png');
            ctx.restore();

            const a = document.createElement('a');
            a.href = dataURL;
            a.download = 'diagrama.png';

            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        saveState();
    </script>
</body>
</html>
